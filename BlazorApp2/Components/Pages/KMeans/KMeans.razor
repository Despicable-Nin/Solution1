@page "/datamining"
@rendermode InteractiveServer

@using BlazorApp2.Data
@using BlazorApp2.Helpers
@using BlazorApp2.Services
@using BlazorApp2.Services.Clustering
@using BlazorApp2.Services.Crimes
@using BlazorApp2.Services.Enumerations
@using BlazorApp2.Services.Geocoding
@using System.Collections.Concurrent
@using Blazored.Toast.Configuration
@using OpenLayers.Blazor


@inject IClusteringService ClusteringService
@inject ICrimeService CrimeService
@inject IEnumeration EnumService
@inject AddressProcessorService GeocodingService
@inject IToastService ToastService

<h3>K-Means Clustering Results</h3>
<div class="container">
    <div class="row">
        <div class="col-6 col-sm-12 mb-3">
            <div class="form-group">
                <label for="numberOfClusters">Number of Clusters</label>
                <div class="input-group">
                    <input type="number" class="form-control col-sm-3" id="numberOfClusters" @bind="NumberOfCluster" placeholder="Number of cluster" min="3" aria-label="Number of cluster" aria-describedby="basic-addon2">
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="PerformClustering">Perform Clustering</button>
                        <button class="btn btn-danger" @onclick="ClearClusters" disabled="@Loading">Delete All Clusters</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6 col-sm-12">
            <div class="form-check checkbox-aligner">
                <input class="form-check-input mb-2" type="checkbox" id="showCheckboxes" @bind="ShowFeatures">
                <label class="form-check-label" for="showCheckboxes">&nbsp;Hide/Show Cluster Properties</label>
            </div>
        </div>
    </div>

    <hr />
    <div class="checkbox-container" style="@(ShowFeatures ? "" : "display: none;")">
        @foreach (var property in sanitizedRecordProperties)
        {
            <div class="checkbox-item">
                <input type="checkbox" @bind="@SelectedFeatures[property]" /> @property
            </div>
        }
    </div>
</div>


<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                ShowProgressBar="true" />

<hr />
@if (Loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p><em>Loading data, please wait...</em></p>
    </div>
}
else if (Clusters != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Crime(s)</th>
                <th>Latitude</th>
                <th>Longitude</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Clusters)
            {
                <tr>
                    <td>@result.Count</td>
                    <td>@result.Latitude</td>
                    <td>@result.Longitude</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (Clusters != null && Clusters.Any())
{
    <div class="container">
        <OpenStreetMap Style="height:480px; width:640px" Zoom="18" Center="@(new Coordinate(initialLongitude, initialLatitude))">
            <Features>
                @foreach (var cluster in Clusters)
                {
                    <Marker Type="MarkerType.MarkerPin" Coordinate="@(new Coordinate(double.Parse(cluster.Longitude), double.Parse(cluster.Latitude)))"></Marker>
                }
            </Features>
        </OpenStreetMap>
    </div>
}

<style>
    .checkbox-container {
        display: flex;
        flex-wrap: wrap; /* Allow items to wrap into the next line */
        gap: 20px; /* Space between checkbox items */
        max-height: 200px; /* Set a maximum height for the container */
        overflow-y: auto; /* Enable vertical scrollbar if content overflows */
    }

    .checkbox-item {
        flex: 1 0 30%; /* Make each item take up to 30% of the container width */
        min-width: 200px; /* Minimum width to ensure they don’t get too small */
    }

    .checkbox-aligner {
        display: flex;
        align-items: center;
    }
</style>

@code {
    private const double initialLongitude = 121.04763778648794D, initialLatitude = 14.372935416829094D;

    bool ShowFeatures { get; set; } = true;
    bool Loading { get; set; }
    int NumberOfCluster { get; set; } = 3;

    IEnumerable<ClusterResult>? Clusters { get; set; } = [];
    Dictionary<string, bool> SelectedFeatures { get; set; } = [];

    readonly string[] sanitizedRecordProperties = GenericHelper.GetProperties<SanitizedCrimeRecord>().Except(["Id"]).ToArray();
    readonly string[] initialProperties = new[]{nameof(SanitizedCrimeRecord.CaseID),
        nameof(SanitizedCrimeRecord.CrimeType),
        nameof(SanitizedCrimeRecord.Latitude),
        nameof(SanitizedCrimeRecord.Longitude)};

    protected override void OnInitialized()
    {
        // Initialize the SelectedProperties dictionary
        foreach (var property in sanitizedRecordProperties)
        {
            // All checkboxes start unchecked
            SelectedFeatures[property] = false;
            if (initialProperties.Contains(property))
            {
                // CaseID is selected by default
                SelectedFeatures[property] = true;
            }
        }
    }

    private async Task PerformClustering()
    {
        Loading = true;
        try
        {
            var paginatedRecordOfCrimes = await CrimeService.GetCrimesAsync(1, int.MaxValue);

            if (!paginatedRecordOfCrimes.Crimes.Any())
            {
                throw new Exception("No records to cluster");
            }

            if (paginatedRecordOfCrimes.Crimes.Count() > 0)
            {
                var sanitizedRecords = paginatedRecordOfCrimes.Crimes.Select(c => ClusteringService.ToSanitizedCrimeRecord(c)).ToArray();

                var features = SelectedFeatures
                  .Where(x => x.Value)
                  .Where(x => x.Key != nameof(SanitizedCrimeRecord.CaseID))
                  .Select(x => x.Key).ToArray();

                Clusters = ClusteringService.PerformKMeansClustering(sanitizedRecords, features, NumberOfCluster);
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        Loading = false;
    }

    private void ClearClusters()
    {
        Clusters = [];
        ToastService.ShowInfo("Clusters cleared successfully.");
    }
}
<style>
    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: .25em;
    }
</style>
