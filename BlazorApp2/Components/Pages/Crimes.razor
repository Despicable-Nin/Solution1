@page "/crimes"
@using BlazorApp2.Services.Crimes
@rendermode InteractiveServer
@inject IWebHostEnvironment WebHotEnv

@using BlazorApp2.Data
@using BlazorApp2.Helpers
@using BlazorApp2.Services
@using BlazorApp2.Components
@using BlazorApp2.Components.Pages.Partials
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore

@* Page Title *@
<PageTitle>Crime Records</PageTitle>

<h1>Crime Records</h1>

<!-- Inline file upload form -->
<div class="container mb-4">
    <EditForm Model="_fileModel" enctype="multipart/form-data" OnValidSubmit="HandleFileUpload">
        <div class="input-group">
            <InputFile OnChange="HandleFileSelected" class="form-control" />
            <button type="submit" class="btn btn-success">Upload</button>
        </div>
    </EditForm>
</div>

@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p><em>Loading data, please wait...</em></p>
    </div>
}

@if (!_isLoading && _crimes != null)
{
    <h3>Uploaded Crime Records</h3>
    @if (!_crimes.Any())
    {
        <p>No crime records available.</p>
    }
    else
    {
        <div id="crime_table" class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Case ID</th>
                        <th>Crime Type</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Address</th>
                        <th>Severity</th>
                        <th>Weapon Used</th>
                        <th>Victim Count</th>
                        <th>Arrest Date</th>
                        <th>Police District</th>
                        <th>Weather Condition</th>
                        <th>Crime Motive</th>
                        <th>Recurring Incident</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var crime in _crimes)
                    {
                        <tr>
                            <td>@crime.CaseID</td>
                            <td>@crime.CrimeType</td>
                            <td>@crime.Date</td>
                            <td>@crime.Time.ToString(@"hh\:mm\:ss")</td>
                            <td>@crime.Address</td>
                            <td>@crime.Severity</td>
                            <td>@crime.WeaponUsed</td>
                            <td>@crime.VictimCount</td>
                            <td>@crime.ArrestDate</td>
                            <td>@crime.PoliceDistrict</td>
                            <td>@crime.WeatherCondition</td>
                            <td>@crime.CrimeMotive</td>
                            <td>@crime.RecurringIncident</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination Controls -->
         <Pagination CurrentPage="CurrentPage" TotalPages="TotalPages" OnPageChanged="ChangePage" />
 
    
    }
}


@code {
    #region Dependencies
    [Inject]
    private ICrimeService _service { get; set; } = null!;
    #endregion

    #region Member Fields
    FileModel _fileModel = new FileModel();
    bool _isLoading = false;
    IEnumerable<CrimeDto> _crimes = Array.Empty<CrimeDto>();

    public int CurrentPage { get; private set; } = 1;
    public int PageSize { get; set; } = 10;
    public int TotalRecords { get; private set; }
    public int TotalPages => (int)Math.Ceiling((double)TotalRecords / PageSize);
    #endregion

    #region Lifecycle Method(s)
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    #endregion

    #region Method(s)
    private async Task LoadData()
    {
        _isLoading = true; // Set loading to true
        try
        {
            var result = await _service.GetCrimesAsync(CurrentPage, PageSize);

            TotalRecords = result.TotalCount;
            _crimes = result.Crimes;
        }
        finally
        {
            _isLoading = false; // Set loading to false
            StateHasChanged(); // Trigger re-render

        }
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > TotalPages)
            return;

        CurrentPage = newPage;
        await LoadData();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            _fileModel.File = e.GetMultipleFiles(1).FirstOrDefault();
        }
    }

    private async Task HandleFileUpload()
    {
        if (_fileModel.File == null)
        {
            Console.WriteLine("No file was uploaded.");
            return;
        }

        _isLoading = true;

        try
        {
            using var stream = _fileModel.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024); // Limit to 2 MB
            using var reader = new StreamReader(stream);
            string? line;

            var crimes = new List<CrimeDto>();

            while ((line = await reader.ReadLineAsync()) != null)
            {
                var columns = line.Split(',');

                if (columns.Length != GenericHelper.CountProperties<Crime>() - 1)
                {
                    throw new Exception("Invalid number of columns in the file.");
                };

                if (!int.TryParse(columns[0], out _))
                {
                    continue;
                }

                var crime = new CrimeDto
                    {
                        CaseID = int.Parse(columns[0]),
                        CrimeType = columns[1],
                        Date = columns[2],
                        Time = TimeSpan.Parse(columns[3]),
                        Address = columns[4],
                        Severity = columns[5],
                        Description = columns[6],
                        WeaponUsed = columns[7],
                        VictimCount = int.Parse(columns[8]),
                        SuspectDescription = columns[9],
                        ArrestMade = columns[10].Equals("Yes", StringComparison.OrdinalIgnoreCase),
                        ArrestDate = columns[11],
                        ResponseTimeInMinutes = int.Parse(columns[12]),
                        PoliceDistrict = columns[13],
                        WeatherCondition = columns[14],
                        CrimeMotive = columns[15],
                        NearbyLandmarks = columns[16],
                        RecurringIncident = columns[17].Equals("Yes", StringComparison.OrdinalIgnoreCase),
                        PopulationDensityPerSqKm = int.Parse(columns[18]),
                        UnemploymentRate = columns[19],
                        MedianIncome = columns[20],
                        ProximityToPoliceStationInKm = columns[21],
                        StreetLightPresent = columns[22].Equals("Yes", StringComparison.OrdinalIgnoreCase),
                        CCTVCoverage = columns[23].Equals("Yes", StringComparison.OrdinalIgnoreCase),
                        AlcoholOrDrugInvolvement = columns[24].Equals("Yes", StringComparison.OrdinalIgnoreCase)
                    };

                crimes.Add(crime);
            }
            await _service.AddCrimesAsync(crimes.Distinct());

            await LoadData(); // Reload data to reflect new entries
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing file: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            _fileModel = new FileModel();
        }
    }
    #endregion

    #region Request Model
    record FileModel
    {
        public IBrowserFile? File { get; set; }
    }
    #endregion
}

<style>
    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: .25em;
    }
</style>
