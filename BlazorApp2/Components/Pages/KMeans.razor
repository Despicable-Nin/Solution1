@page "/datamining"
@rendermode InteractiveServer

@using BlazorApp2.Data
@using BlazorApp2.Helpers
@using BlazorApp2.Services
@using BlazorApp2.Services.Clustering
@using BlazorApp2.Services.Crimes
@inject ClusteringService ClusteringService

<h3>K-Means Clustering Results</h3>

<button class="btn btn-primary" @onclick="PerformClustering">Perform Clustering</button>

@if (_isLoading)
{
    <p>Loading...</p>
}
else if (_clusterResults != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Record ID</th>
                <th>Cluster ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in _clusterResults)
            {
                <tr>
                    <td>@result.RecordId</td>
                    <td>@result.ClusterId</td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>Select Properties to Include in Clustering</h4>
<div class="checkbox-container">
    @foreach (var property in CrimeProperties)
    {
        <div class="checkbox-item">
            <input type="checkbox" @bind="@SelectedProperties[property]" /> @property
        </div>
    }
</div>

@code {
    private bool _isLoading = false;
    private List<ClusteringService.ClusterResult>? _clusterResults;
    private string[] CrimeProperties { get; set; } = Array.Empty<string>();
    private Dictionary<string, bool> SelectedProperties { get; set; } = new();

    [Inject] private ICrimeService _crimeService { get; set; } = null!;

    protected override void OnInitialized()
    {
        // Get the property names from the Crime class
        CrimeProperties = GenericHelper.GetProperties<Crime>();

        // Initialize the SelectedProperties dictionary
        foreach (var property in CrimeProperties)
        {
            SelectedProperties[property] = false; // All checkboxes start unchecked
        }
    }

    private async Task PerformClustering()
    {
        _isLoading = true;

        // Example data (replace this with your real data)
        var data = await _crimeService.GetCrimesAsync(1, 1000);

        _clusterResults = ClusteringService.PerformKMeansClustering(data.Crimes,[]);

        _isLoading = false;
    }
}

<style>
    .checkbox-container {
    display: flex;
    flex-wrap: wrap; /* Allow items to wrap into the next line */
    gap: 20px; /* Space between checkbox items */
}

.checkbox-item {
    flex: 1 0 30%; /* Make each item take up to 30% of the container width */
    min-width: 200px; /* Minimum width to ensure they don’t get too small */
}

</style>