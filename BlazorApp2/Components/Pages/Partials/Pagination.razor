@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; } = 1;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    private async Task ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > TotalPages)
            return;

        CurrentPage = newPage;
        await OnPageChanged.InvokeAsync(newPage);
    }
}

<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item">
            <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(CurrentPage <= 1)">
                <span aria-hidden="true">First</span>
                <span class="sr-only">First</span>
            </button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage <= 1)">
                <span aria-hidden="true">Previous</span>
                <span class="sr-only">Previous</span>
            </button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage >= TotalPages)">
                <span aria-hidden="true">Next</span>
                <span class="sr-only">Next</span>
            </button>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="() => ChangePage(TotalPages)" disabled="@(CurrentPage >= TotalPages)">
                <span aria-hidden="true">Last</span>
                <span class="sr-only">Last</span>
            </button>
        </li>
    </ul>
    <div class="pagination-info">
        Page @CurrentPage of @TotalPages
    </div>
</nav>

<style>
    .pagination-info {
        margin-top: 10px;
        text-align: center;
    }
</style>
