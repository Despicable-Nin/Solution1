
<!-- Pagination Controls -->
<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage <= 1)">
                <span aria-hidden="true">&laquo;</span>
                <span class="sr-only">Previous</span>
            </button>
        </li>

        @for (int i = Math.Max(1, CurrentPage - 1); i <= Math.Min(TotalPages, CurrentPage + 1); i++)
        {
            <li class="page-item @(i == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
            </li>
        }

        <li class="page-item">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage >= TotalPages)">
                <span aria-hidden="true">&raquo;</span>
                <span class="sr-only">Next</span>
            </button>
        </li>
    </ul>
</nav>
@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; } = 1;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    private async Task ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > TotalPages)
            return;

        CurrentPage = newPage;
        await OnPageChanged.InvokeAsync(newPage);
    }
}
