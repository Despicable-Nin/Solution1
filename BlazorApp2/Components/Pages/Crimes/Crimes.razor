@page "/crimes"

@rendermode InteractiveServer

@using BlazorApp2.BackgroundServices
@using BlazorApp2.Services.Crimes
@using BlazorApp2.Data
@using BlazorApp2.Helpers
@using BlazorApp2.Services
@using BlazorApp2.Components
@using BlazorApp2.Components.Pages.Partials
@using BlazorApp2.Services.Enumerations
@using BlazorApp2.Services.Jobs
@using Blazored.Toast.Configuration
@using Hangfire
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using Serilog


@inject IWebHostEnvironment WebHotEnv
@inject IToastService ToastService
@inject ICrimeService CrimeService
@inject IEnumeration EnumService
@inject IJobService JobService
@inject JobProcessingService JobProcessor
@inject NavigationManager NavigationManager


<PageTitle>Crime Records</PageTitle>

<h1>Crime Records</h1>

<!-- Inline file upload form -->
<div class="container mb-4">
    <EditForm Model="fileModel" enctype="multipart/form-data" OnValidSubmit="HandleFileUpload">
        <div class="input-group">
            <InputFile OnChange="HandleFileSelected" class="form-control" />
            <button type="submit" class="btn btn-success">Upload</button>
        </div>
    </EditForm>
</div>

<div class="container">
    @if (Loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p><em>Loading data, please wait...</em></p>
        </div>
    }
    <BlazoredToasts Position="ToastPosition.TopRight"
                    Timeout="5"
                    ShowProgressBar="true" />

    @if (!Loading && CrimeDtos != null)
    {

        @if (!CrimeDtos.Any())
        {
            <p>No crime records available.</p>
        }
        else
        {
            @if (IsDirty)
            {
                <button type="submit" class="btn btn-outline-secondary" disabled="disabled">Sanitize (disabled)</button>
            }
            else
            {
                <button type="submit" class="btn btn-outline-success" @onclick="OnSanitizeButtonClick">Sanitize</button>
            }
            <hr />
            <CrimesTable Crimes="CrimeDtos" />

            <!-- Pagination Controls -->
            <Pagination CurrentPage="CurrentPage" TotalPages="TotalPages" OnPageChanged="ChangePage" />
        }
    }
</div>

@code {

    [Parameter]
    public EventCallback OnFileUploadSuccess { get; set; }
    FileModel fileModel = new FileModel();
    HubConnection? hubConnection;

    int itemsPerPage { get; set; } = 10;
    int totalItems;

    bool Loading;
    bool IsDirty;
    int TotalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);
    int CurrentPage { get; set; } = 1;
    IEnumerable<CrimeDashboardDto> CrimeDtos = [];

    #region Lifecycle Method(s)
    protected override async Task OnInitializedAsync()
    {
        var preventLoading = false;
        hubConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"))
         .Build();

        hubConnection.On<string>("ReceiveJobUpdate", async (message) =>
        {
            ToastService.ShowSuccess(message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (preventLoading == false)
        {
            await LoadData();
        }
    }

    #endregion

    #region Method(s)
    private async Task LoadData()
    {
        var errorMessage = string.Empty;
        try
        {
            Loading = true;

            var result = await CrimeService.GetCrimesAsync(CurrentPage, itemsPerPage);
            totalItems = result.TotalCount;
            CrimeDtos = result.Crimes;
            IsDirty = CrimeDtos.Any(i => i.IsWithoutLatLong);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message + "\r\n" + ex.InnerException?.Message;
            ToastService.ShowError($"An error occurred. {errorMessage}", settings =>
          {
              settings.Icon = "fas fa-exclamation-circle"; // Font Awesome icon
              settings.Timeout = 10000; // Duration in milliseconds
          });
        }

        Loading = false;
    }

    private async Task OnSanitizeButtonClick()
    {
        try
        {
            BackgroundJob.Enqueue(() => JobProcessor.ProcessJobAsync());

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}. {ex.InnerException?.Message}");
        }

        ToastService.ShowSuccess("Sanitizing...");
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > TotalPages)
            return;

        CurrentPage = newPage;

        await LoadData();
    }

    #endregion

    #region For Upload


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            fileModel.File = e.GetMultipleFiles(1).FirstOrDefault();
        }
    }

    private async Task HandleFileUpload()
    {
        var batchId = Guid.NewGuid();
        var crimes = new List<CrimeDashboardDto>();

        try
        {
            Loading = true;

            if (fileModel.File == null)
            {
                throw new Exception("No file was uploaded.");
            }

            using var stream = fileModel.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024); // Limit to 2 MB
            using var reader = new StreamReader(stream);

            //read the first line only --- the header
            string? line = await reader.ReadLineAsync();

            if (line != GenericHelper.CSVFields)
            {
                throw new Exception("File (*.csv) may be corrupt or is invalid format. ");
            }

            while ((line = await reader.ReadLineAsync()) != null)
            {
                var columns = line.Split(',');

                if (!int.TryParse(columns[0], out _))
                {
                    continue;
                }

                var crime = new CrimeDashboardDto
                    {
                        BatchID = batchId,
                        CaseID = int.Parse(columns[0]),
                        CrimeType = columns[1],
                        Date = columns[2],
                        Time = TimeSpan.Parse(columns[3]),
                        Address = columns[4],
                        Severity = columns[5],
                        Description = columns[6],
                        WeaponUsed = columns[7],
                        VictimCount = int.Parse(columns[8]),
                        SuspectDescription = columns[9],
                        ArrestMade = columns[10].Equals("Yes", StringComparison.OrdinalIgnoreCase) ? 1 : 0,
                        ArrestDate = columns[11],
                        ResponseTimeInMinutes = int.Parse(columns[12]),
                        PoliceDistrict = columns[13],
                        WeatherCondition = string.IsNullOrEmpty(columns[14]) ? "Unknown" : columns[14],
                        CrimeMotive = columns[15],
                        NearbyLandmarks = columns[16],
                        RecurringIncident = columns[17].Equals("Yes", StringComparison.OrdinalIgnoreCase) ? 1 : 0,
                        PopulationDensityPerSqKm = int.Parse(columns[18]),
                        UnemploymentRate = columns[19],
                        MedianIncome = columns[20],
                        ProximityToPoliceStationInKm = columns[21],
                        StreetLightPresent = columns[22].Equals("Yes", StringComparison.OrdinalIgnoreCase),
                        CCTVCoverage = columns[23].Equals("Yes", StringComparison.OrdinalIgnoreCase),
                        AlcoholOrDrugInvolvement = columns[24].Equals("Yes", StringComparison.OrdinalIgnoreCase)
                    };

                crimes.Add(crime);
            }

            if(!GenericHelper.ArePropertiesAssigned(crimes))
            {
                throw new Exception("Some records have missing data. Please check the file and try again.");
            }

            // add crimes to the database
            if (await CrimeService.AddCrimesAsync(crimes.Distinct()) == 0)
            {
                throw new Exception("Upload complete but no changes. This may be caused by duplicate entries.");
            }
            
             await JobService.CreateJobAsync(batchId.ToString(), JobType.Upload);

            ToastService.ShowSuccess("Finished uploading data..");
            ToastService.ShowInfo("Job created for data sanitization..");

            // Notify parent component after a successful upload
            await OnFileUploadSuccess.InvokeAsync();
          

        }
        catch (Exception ex)
        {
            var errorMessage = ex.Message + "\r\n" + ex.InnerException?.Message;
            ToastService.ShowError($"Error processing file: {errorMessage}");
        }

        fileModel = new FileModel();
        await LoadData();
        
    }

    record FileModel
    {
        public IBrowserFile? File { get; set; }
    }

    #endregion

}

<style>
    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: .25em;
    }
</style>
