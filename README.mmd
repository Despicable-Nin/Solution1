sequenceDiagram
    participant User
    participant App
    participant GISService as GIS Service
    participant Database
    participant ML as K-Means Library
    participant Map as Map Service

    User->>App: Upload CSV File
    App->>App: Sanitize Data (check for duplicates)
    App->>GISService: Convert Address to Lat/Long
    GISService-->>App: Return Lat/Long
    App->>App: Transform Data for K-Means (ensure numeric types)
    
    App->>Database: Persist Cleaned Data
    Database-->>App: Acknowledge Data Saved

    App->>ML: Perform K-Means Clustering on Lat/Long
    ML-->>App: Return Cluster Results (Cluster IDs and Centroids)

    alt Cluster Results Success
        App->>Map: Generate Map Pinpoints and Centroids
        Map-->>App: Map Rendered with Clusters and Centroids
    else Cluster Results Failure
        App->>User: Show Clustering Error Message
    end

    User-->>Map: View Map with Clustered Points and Centroids


```
docker

docker rmi -f $(docker images -q)
docker image prune -a -f

```

Make sure to check the docker-compose.yml and Dockerfile on the root folder of the project.
You should be able to run the ff.
```
docker

[Solution1 directory]: docker-compose up --build

```
This will run the application in localhost:8080

For debugging, simply stop the container for the blazor app using the command-line `docker stop solution1-blazorapp-1 (this will stop the container named 'solution1-blazorapp-1'))`

